module MatDeforNonlinearModule

using FinEtools.FTypesModule: FInt, FFlt, FCplxFlt, FFltVec, FIntVec, FFltMat, FIntMat, FMat, FVec, FDataDict
import FinEtoolsDeforLinear.DeforModelRedModule: AbstractDeforModelRed
import FinEtoolsDeforLinear.MatDeforModule: AbstractMatDefor
import LinearAlgebra:  det

"""
    AbstractMatDeforNonlinear <: AbstractMatDefor

Abstract nonlinear material.

"""
abstract type AbstractMatDeforNonlinear <: AbstractMatDefor; end

"""
    tangentmoduli!(self::M, D::FFltMat, statev::FFltVec, Fn1::FFltMat,
        Fn::FFltMat, tn::FFlt, dtn::FFlt, loc::FFltMat, label::FInt)
        where {M<:AbstractMatDeforNonlinear}

Calculate the material stiffness matrix.

# Arguments
- `self` = material
- `D` = matrix of tangent moduli, supplied as a buffer and overwritten.
  Returned as output.
- `statev` = material state vector, the content of this vector must not change
    inside this function.
- `Fn1` = deformation gradient at time `tn1 = tn + dtn`,
- `Fn` = deformation gradient at time `tn`,
- `tn` = time in step `n`
- `dtn` = increment of time
- `loc` = location of the integration point in the reference coordinates (time `t0`),
- `label` = label of the element containing the integration point

!!! note
The deformation gradients and the matrix of the tangent moduli are expressed
with respect to the local material coordinate system.
"""
function tangentmoduli!(self::M, D::FFltMat, statev::FFltVec, Fn1::FFltMat, Fn::FFltMat, tn::FFlt, dtn::FFlt, loc::FFltMat, label::FInt) where {M<:AbstractMatDeforNonlinear}
    return self.tangentmoduli!(self, D, statev, Fn1, Fn, tn, dtn, loc, label)
end

"""
    update!(self::M, statev::FFltVec, stress::FFltVec, output::FFltVec,
        Fn1::FFltMat, Fn::FFltMat, tn::FFlt, dtn::FFlt,
        loc::FFltMat=zeros(3,1), label::FInt=0, quantity=:nothing)
        where {M<:AbstractMatDeforNonlinear}

Update material state.

# Arguments
- `self` = material
- `statev` = state variables: array which is (if necessary) allocated  in an appropriate
     size, filled with the state variables, and returned. The contents of this
     vector may change as the state of the material is updated by the logic inside
     this function. If this change is to be saved, it must happen outside of this
     function.
- `cauchy` = Cauchy stress vector, allocated by the caller with a size of the
  number of stress and strain components, `nstressstrain`. The components of
  the stress vector are calculated and stored in the `stress` vector.
- `output` =  array which is (if necessary) allocated  in an appropriate size,
     filled with the output quantity, and returned.
- `Fn1` = deformation gradient at time `tn1 = tn + dtn`,
- `Fn` = deformation gradient at time `tn`,
- `tn` = time in step `n`
- `dtn` = increment of time
- `loc` = location of the integration point in the reference coordinates (time `t0`),
- `label` = label of the element containing the integration point

# Output
- `cauchy` = Cauchy stress vector
- `output` = output array

!!! note
The deformation gradients and the stress vector are expressed
with respect to the local material coordinate system.
"""
function update!(self::M, statev::FFltVec, cauchy::FFltVec, output::FFltVec,  Fn1::FFltMat, Fn::FFltMat, tn::FFlt, dtn::FFlt, loc::FFltMat=zeros(3,1), label::FInt=0, quantity=:nothing) where {M<:AbstractMatDeforNonlinear}
    return self.update!(self, statev, cauchy, output, Fn1, Fn, tn, dtn, loc, label, quantity)
end

"""
    newstate(self::M) where {M<:AbstractMatDeforNonlinear}

Create an initial material state at an integration point.
"""
function newstate(self::M) where {M<:AbstractMatDeforNonlinear}
    return FFlt[] # the default material state is an empty array: no state to store
end

"""
    totalLagrangean2current!(cout, C, F)

Convert a total Lagrangean constitutive matrix to a current Lagrangean one
(sometimes known as "Eulerian").

- `C`    = Lagrangean constitutive matrix, 6x6, symmetric
- `F`    = current deformation gradient, F_iJ = partial x_i / partial X_J

The transformation is c_ijkl = 1/J C_IJKL F_iI F_jJ F_kK F_lL. In the present
case the fourth-order tensor is represented with a 6 x 6 matrix.

!!! note
The Lagrangean material stiffness matrices, both input and output, are
presumed symmetric.
"""
function totalLagrangean2current!(cout, C, F)
	@assert size(C) == (6, 6)
    F11 = F[1, 1]; F12 = F[1, 2]; F13 = F[1, 3]; F21 = F[2, 1]; F22 = F[2, 2]; F23 = F[2, 3]; F31 = F[3, 1]; F32 = F[3, 2]; F33 = F[3, 3]; 
    C11 = C[1, 1]; C12 = C[1, 2]; C13 = C[1, 3]; C14 = C[1, 4]; C15 = C[1, 5]; C16 = C[1, 6]; C21 = C[2, 1]; C22 = C[2, 2]; C23 = C[2, 3]; C24 = C[2, 4]; C25 = C[2, 5]; C26 = C[2, 6]; C31 = C[3, 1]; C32 = C[3, 2]; C33 = C[3, 3]; C34 = C[3, 4]; C35 = C[3, 5]; C36 = C[3, 6]; C41 = C[4, 1]; C42 = C[4, 2]; C43 = C[4, 3]; C44 = C[4, 4]; C45 = C[4, 5]; C46 = C[4, 6]; C51 = C[5, 1]; C52 = C[5, 2]; C53 = C[5, 3]; C54 = C[5, 4]; C55 = 
    C[5, 5]; C56 = C[5, 6]; C61 = C[6, 1]; C62 = C[6, 2]; C63 = C[6, 3]; C64 = C[6, 4]; C65 = C[6, 5]; C66 = C[6, 6];    
    @inbounds begin
	    cout[1,1] = (C11*F11^4+4*C14*F11^3*F12+4*C15*F11^3*F13+2*C12*F11^2*F12^2+4*C16*F11^2*F12*F13+2*C13*F11^2*F13^2+4*C44*F11^2*F12^2+8*C45*F11^2*F12*F13+4*C24*F11*F12^3+8*C46*F11*F12^2*F13+4*C34*F11*F12*F13^2+4*C55*F11^2*F13^2+4*C25*F11*F13*F12^2+8*C56*F11*F13^2*F12+4*C35*F11*F13^3+C22*F12^4+4*C26*F12^3*F13+2*C23*F12^2*F13^2+4*C66*F12^2*F13^2+4*C36*F12*F13^3+C33*F13^4);
	    cout[1,2] = (C12*F12^2*F21^2+4*C56*F13*F12*F21*F23+4*C66*F13*F12*F22*F23+4*C56*F11*F13*F22*F23+4*C44*F11*F12*F21*F22+4*C45*F11*F12*F21*F23+4*C45*F11*F13*F21*F22+4*C55*F11*F13*F21*F23+4*C46*F11*F12*F22*F23+4*C46*F13*F12*F21*F22+C12*F11^2*F22^2+C22*F12^2*F22^2+C13*F13^2*F21^2+C11*F11^2*F21^2+C13*F11^2*F23^2+C23*F12^2*F23^2+C33*F13^2*F23^2+C23*F13^2*F22^2+2*C24*F11*F12*F22^2+2*C34*F13^2*F21*F22+2*C15*F11^2*F21*F23+2*C15*F11*F13*F21^2+2*C26*F13*F12*F22^2+2*C36*F13^2*F22*F23+2*C36*F13*F12*F23^2+2*C35*F11*F13*F23^2+2*C35*F13^2*F21*F23+2*C16*F11^2*F22*F23+2*C34*F11*F12*F23^2+2*C14*F11*F12*F21^2+2*C14*F11^2*F21*F22+2*C16*F12*F13*F21^2+2*C25*F11*F13*F22^2+2*C26*F12^2*F22*F23+2*C25*F12^2*F21*F23+2*C24*F12^2*F21*F22);
	    cout[1,3] = (4*C66*F13*F12*F32*F33+C13*F11^2*F33^2+C33*F13^2*F33^2+C12*F12^2*F31^2+C12*F11^2*F32^2+C22*F12^2*F32^2+C11*F11^2*F31^2+C23*F13^2*F32^2+C23*F12^2*F33^2+C13*F13^2*F31^2+4*C45*F11*F13*F31*F32+4*C55*F11*F13*F31*F33+4*C45*F11*F12*F31*F33+4*C46*F11*F12*F32*F33+4*C46*F12*F13*F31*F32+4*C56*F11*F13*F32*F33+4*C56*F13*F12*F31*F33+4*C44*F11*F12*F31*F32+2*C34*F11*F12*F33^2+2*C16*F12*F13*F31^2+2*C34*F13^2*F31*F32+2*C15*F11*F13*F31^2+2*C15*F11^2*F31*F33+2*C16*F11^2*F32*F33+2*C25*F11*F13*F32^2+2*C35*F11*F13*F33^2+2*C35*F13^2*F31*F33+2*C26*F12^2*F32*F33+2*C26*F13*F12*F32^2+2*C14*F11*F12*F31^2+2*C14*F11^2*F31*F32+2*C24*F12^2*F31*F32+2*C24*F11*F12*F32^2+2*C36*F13^2*F32*F33+2*C36*F13*F12*F33^2+2*C25*F12^2*F31*F33);
	    cout[1,4] = (C26*F12^3*F23+C36*F13^3*F22+C11*F11^3*F21+C14*F11^3*F22+C35*F13^3*F21+C22*F12^3*F22+C24*F12^3*F21+2*C45*F11^2*F13*F22+2*C66*F12^2*F13*F23+2*C56*F12*F13^2*F21+2*C56*F11*F13^2*F22+C15*F11^3*F23+C16*F11^2*F13*F22+C25*F12^2*F11*F23+C25*F12^2*F13*F21+4*C56*F11*F13*F12*F23+C16*F11^2*F12*F23+3*C14*F11^2*F12*F21+2*C44*F11*F12^2*F21+3*C15*F11^2*F13*F21+C33*F13^3*F23+2*C34*F11*F12*F13*F23+4*C46*F11*F12*F13*F22+2*C16*F12*F13*F11*F21+C13*F11^2*F13*F23+C13*F13^2*F11*F21+2*C44*F11^2*F12*F22+3*C36*F12*F13^2*F23+3*C35*F11*F13^2*F23+2*C46*F11*F12^2*F23+2*C46*F12^2*F13*F21+2*C66*F12*F13^2*F22+C12*F12^2*F11*F21+C34*F13^2*F11*F22+C23*F12^2*F13*F23+C23*F13^2*F12*F22+C34*F13^2*F12*F21+3*C24*F11*F12^2*F22+C12*F11^2*F12*F22+4*C45*F11*F12*F13*F21+2*C55*F11^2*F13*F23+2*C25*F11*F13*F12*F22+2*C45*F11^2*F12*F23+2*C55*F11*F13^2*F21+3*C26*F12^2*F13*F22);
	    cout[1,5] = (4*C46*F11*F12*F13*F32+4*C56*F11*F13*F12*F33+2*C25*F11*F13*F12*F32+4*C45*F11*F12*F13*F31+2*C16*F12*F13*F11*F31+2*C66*F12*F13^2*F32+2*C66*F12^2*F13*F33+3*C26*F12^2*F13*F32+2*C46*F12^2*F13*F31+2*C46*F11*F12^2*F33+C24*F12^3*F31+C22*F12^3*F32+3*C15*F11^2*F13*F31+2*C55*F11^2*F13*F33+2*C55*F11*F13^2*F31+2*C56*F12*F13^2*F31+2*C56*F11*F13^2*F32+C26*F12^3*F33+C35*F13^3*F31+C36*F13^3*F32+C11*F11^3*F31+C14*F11^3*F32+2*C45*F11^2*F13*F32+C12*F12^2*F11*F31+C16*F11^2*F13*F32+C25*F12^2*F11*F33+C25*F12^2*F13*F31+C34*F13^2*F11*F32+2*C45*F11^2*F12*F33+C23*F12^2*F13*F33+C34*F13^2*F12*F31+C23*F13^2*F12*F32+3*C14*F12*F11^2*F31+3*C35*F11*F13^2*F33+2*C44*F11*F12^2*F31+2*C44*F11^2*F12*F32+C15*F11^3*F33+2*C34*F11*F12*F13*F33+C13*F13^2*F11*F31+C13*F11^2*F13*F33+3*C36*F12*F13^2*F33+C16*F11^2*F12*F33+3*C24*F11*F12^2*F32+C12*F11^2*F12*F32+C33*F13^3*F33);
	    cout[1,6] = (C22*F12^2*F22*F32+C24*F12^2*F22*F31+C24*F12^2*F21*F32+C12*F11^2*F22*F32+C11*F11^2*F21*F31+C12*F12^2*F21*F31+C14*F11^2*F21*F32+C14*F11^2*F22*F31+C15*F11^2*F23*F31+C16*F11^2*F22*F33+C23*F13^2*F22*F32+C13*F11^2*F23*F33+C16*F11^2*F23*F32+2*C56*F12*F13*F23*F31+2*C25*F11*F13*F22*F32+2*C34*F11*F12*F23*F33+2*C55*F13*F11*F23*F31+2*C35*F13*F11*F23*F33+2*C55*F13*F11*F21*F33+2*C36*F12*F13*F23*F33+2*C45*F11*F12*F23*F31+2*C45*F11*F12*F21*F33+2*C45*F11*F13*F21*F32+2*C45*F11*F13*F22*F31+2*C66*F12*F13*F22*F33+2*C24*F11*F12*F22*F32+2*C15*F11*F13*F21*F31+2*C16*F13*F12*F21*F31+2*C46*F11*F12*F22*F33+2*C46*F11*F12*F23*F32+2*C46*F13*F12*F21*F32+2*C46*F13*F12*F22*F31+2*C26*F12*F13*F22*F32+2*C14*F11*F12*F21*F31+2*C44*F11*F12*F22*F31+2*C66*F12*F13*F23*F32+2*C56*F13*F12*F21*F33+2*C56*F13*F11*F22*F33+2*C44*F11*F12*F21*F32+2*C56*F13*F11*F23*F32+C26*F12^2*F23*F32+C15*F11^2*F21*F33+C36*F13^2*F23*F32+C35*F13^2*F21*F33+C23*F12^2*F23*F33+C33*F13^2*F23*F33+C36*F13^2*F22*F33+C26*F12^2*F22*F33+C13*F13^2*F21*F31+C34*F13^2*F21*F32+C34*F13^2*F22*F31+C25*F12^2*F21*F33+C25*F12^2*F23*F31+C35*F13^2*F23*F31);
	    cout[2,1] = (C33*F23^2*F13^2+C11*F21^2*F11^2+C22*F22^2*F12^2+C13*F21^2*F13^2+C12*F22^2*F11^2+C23*F23^2*F12^2+C23*F22^2*F13^2+C13*F23^2*F11^2+2*C24*F22^2*F11*F12+2*C35*F23^2*F11*F13+2*C35*F21*F13^2*F23+2*C36*F22*F13^2*F23+4*C46*F21*F12*F13*F22+2*C14*F21^2*F11*F12+4*C45*F21*F12*F11*F23+4*C46*F22*F11*F12*F23+4*C45*F21*F13*F11*F22+2*C14*F21*F11^2*F22+4*C56*F21*F13*F12*F23+2*C36*F23^2*F12*F13+4*C56*F22*F13*F11*F23+4*C44*F21*F12*F11*F22+2*C15*F21*F11^2*F23+4*C66*F22*F13*F12*F23+2*C15*F21^2*F11*F13+2*C24*F21*F12^2*F22+4*C55*F21*F13*F11*F23+2*C26*F22*F12^2*F23+2*C26*F22^2*F12*F13+2*C16*F21^2*F12*F13+2*C25*F22^2*F11*F13+2*C34*F23^2*F11*F12+2*C34*F21*F22*F13^2+2*C25*F21*F23*F12^2+2*C16*F22*F23*F11^2+C12*F21^2*F12^2);
	    cout[2,2] = (C11*F21^4+4*C14*F21^3*F22+4*C15*F21^3*F23+2*C12*F21^2*F22^2+4*C16*F21^2*F22*F23+2*C13*F21^2*F23^2+4*C44*F22^2*F21^2+8*C45*F22*F21^2*F23+4*C24*F22^3*F21+8*C46*F22^2*F21*F23+4*C34*F21*F22*F23^2+4*C55*F21^2*F23^2+4*C25*F21*F23*F22^2+8*C56*F21*F23^2*F22+4*C35*F21*F23^3+C22*F22^4+4*C26*F22^3*F23+2*C23*F22^2*F23^2+4*C66*F22^2*F23^2+4*C36*F22*F23^3+C33*F23^4);
	    cout[2,3] = (2*C25*F21*F23*F32^2+2*C25*F22^2*F31*F33+2*C34*F21*F22*F33^2+2*C34*F23^2*F31*F32+2*C26*F22^2*F32*F33+2*C35*F23*F21*F33^2+2*C35*F23^2*F31*F33+2*C26*F23*F22*F32^2+2*C36*F23*F22*F33^2+2*C36*F23^2*F32*F33+2*C24*F22^2*F31*F32+2*C24*F21*F22*F32^2+2*C15*F21*F23*F31^2+2*C14*F21*F22*F31^2+2*C15*F21^2*F31*F33+2*C16*F23*F22*F31^2+C13*F21^2*F33^2+C13*F23^2*F31^2+C23*F23^2*F32^2+C23*F22^2*F33^2+C12*F22^2*F31^2+C33*F23^2*F33^2+4*C46*F21*F22*F32*F33+4*C55*F21*F23*F31*F33+4*C56*F23*F22*F31*F33+4*C56*F21*F23*F32*F33+4*C66*F23*F22*F32*F33+4*C45*F21*F23*F31*F32+4*C45*F21*F22*F31*F33+4*C44*F21*F22*F31*F32+4*C46*F23*F22*F31*F32+C11*F21^2*F31^2+C12*F21^2*F32^2+C22*F22^2*F32^2+2*C16*F21^2*F32*F33+2*C14*F21^2*F31*F32);
	    cout[2,4] = (C26*F22^3*F13+C11*F21^3*F11+C33*F23^3*F13+C24*F22^3*F11+C36*F23^3*F12+C15*F21^3*F13+C22*F22^3*F12+4*C46*F21*F12*F22*F23+C35*F23^3*F11+C25*F23*F11*F22^2+2*C44*F22^2*F11*F21+2*C46*F22^2*F13*F21+2*C44*F21^2*F12*F22+3*C15*F21^2*F11*F23+2*C25*F22*F12*F21*F23+4*C45*F22*F11*F21*F23+3*C35*F23^2*F13*F21+2*C45*F21^2*F12*F23+2*C45*F21^2*F13*F22+C13*F21*F11*F23^2+2*C55*F21^2*F13*F23+3*C26*F22^2*F12*F23+C12*F21*F11*F22^2+C13*F23*F13*F21^2+C34*F22*F11*F23^2+C12*F22*F12*F21^2+C23*F22*F12*F23^2+C16*F22*F13*F21^2+C34*F21*F12*F23^2+C23*F23*F13*F22^2+2*C46*F22^2*F11*F23+C16*F23*F12*F21^2+2*C34*F23*F13*F21*F22+2*C55*F23^2*F11*F21+2*C56*F23^2*F12*F21+C25*F21*F13*F22^2+2*C16*F21*F11*F22*F23+3*C24*F21*F12*F22^2+3*C36*F23^2*F13*F22+2*C56*F23^2*F11*F22+2*C66*F22^2*F13*F23+4*C56*F21*F13*F22*F23+3*C14*F21^2*F11*F22+2*C66*F23^2*F12*F22+C14*F21^3*F12);
	    cout[2,5] = (C35*F23^2*F13*F31+C11*F21^2*F11*F31+C26*F22^2*F13*F32+C26*F22^2*F12*F33+C14*F21^2*F12*F31+2*C46*F22*F11*F23*F32+2*C56*F23*F11*F22*F33+2*C46*F21*F12*F22*F33+2*C56*F23*F12*F21*F33+2*C56*F21*F13*F23*F32+2*C56*F22*F13*F23*F31+2*C66*F23*F12*F22*F33+C14*F21^2*F11*F32+2*C66*F22*F13*F23*F32+C36*F23^2*F13*F32+2*C45*F23*F11*F21*F32+C36*F23^2*F12*F33+C22*F22^2*F12*F32+C24*F22^2*F11*F32+C33*F23^2*F13*F33+C24*F22^2*F12*F31+C35*F23^2*F11*F33+2*C14*F21*F11*F22*F31+2*C15*F21*F11*F23*F31+2*C26*F23*F12*F22*F32+2*C35*F23*F13*F21*F33+2*C24*F21*F12*F22*F32+2*C45*F22*F11*F21*F33+2*C36*F22*F13*F23*F33+2*C45*F21*F12*F23*F31+2*C45*F21*F13*F22*F31+C15*F21^2*F13*F31+2*C55*F23*F11*F21*F33+C15*F21^2*F11*F33+2*C55*F21*F13*F23*F31+2*C46*F22*F13*F21*F32+2*C46*F23*F12*F22*F31+2*C44*F21*F12*F22*F31+2*C44*F22*F11*F21*F32+2*C25*F21*F23*F12*F32+C25*F22^2*F11*F33+C23*F22^2*F13*F33+C23*F23^2*F12*F32+C16*F21^2*F13*F32+C13*F23^2*F11*F31+C34*F23^2*F11*F32+C25*F22^2*F13*F31+2*C16*F22*F23*F11*F31+C13*F21^2*F13*F33+C34*F23^2*F12*F31+C12*F21^2*F12*F32+C12*F22^2*F11*F31+C16*F21^2*F12*F33+2*C34*F21*F22*F13*F33);
	    cout[2,6] = (C11*F21^3*F31+3*C15*F21^2*F23*F31+2*C66*F22^2*F23*F33+2*C45*F21^2*F23*F32+2*C45*F21^2*F22*F33+2*C55*F21*F23^2*F31+2*C44*F22^2*F21*F31+2*C66*F22*F23^2*F32+2*C44*F22*F21^2*F32+3*C14*F22*F21^2*F31+2*C55*F21^2*F23*F33+2*C46*F22^2*F23*F31+3*C26*F22^2*F23*F32+3*C35*F21*F23^2*F33+2*C46*F22^2*F21*F33+3*C36*F22*F23^2*F33+2*C56*F21*F23^2*F32+2*C56*F22*F23^2*F31+C25*F22^2*F23*F31+C34*F23^2*F22*F31+C25*F22^2*F21*F33+C34*F23^2*F21*F32+C36*F23^3*F32+C26*F22^3*F33+C33*F23^3*F33+C14*F21^3*F32+C15*F21^3*F33+C22*F22^3*F32+3*C24*F22^2*F21*F32+2*C25*F21*F23*F22*F32+2*C16*F22*F23*F21*F31+4*C46*F22*F21*F23*F32+4*C56*F21*F23*F22*F33+2*C34*F22*F21*F23*F33+C13*F21^2*F23*F33+C12*F22^2*F21*F31+C13*F23^2*F21*F31+C12*F21^2*F22*F32+C24*F22^3*F31+C23*F23^2*F22*F32+C35*F23^3*F31+C16*F21^2*F23*F32+C23*F22^2*F23*F33+C16*F21^2*F22*F33+4*C45*F21*F22*F23*F31);
	    cout[3,1] = (C13*F33^2*F11^2+C23*F33^2*F12^2+C13*F31^2*F13^2+C23*F32^2*F13^2+C11*F31^2*F11^2+C33*F33^2*F13^2+C12*F31^2*F12^2+C22*F32^2*F12^2+4*C66*F32*F33*F12*F13+2*C14*F31^2*F11*F12+2*C34*F33^2*F11*F12+2*C15*F31^2*F11*F13+2*C36*F33^2*F12*F13+2*C36*F32*F33*F13^2+2*C14*F31*F32*F11^2+2*C15*F31*F33*F11^2+4*C45*F31*F33*F11*F12+4*C55*F31*F33*F11*F13+4*C46*F32*F33*F11*F12+2*C24*F32^2*F11*F12+4*C45*F31*F32*F11*F13+2*C35*F33^2*F11*F13+2*C25*F32^2*F11*F13+2*C35*F31*F33*F13^2+2*C25*F31*F33*F12^2+2*C34*F31*F32*F13^2+2*C16*F32*F33*F11^2+2*C26*F32^2*F12*F13+2*C26*F32*F33*F12^2+2*C24*F31*F32*F12^2+4*C44*F31*F32*F11*F12+4*C46*F31*F32*F12*F13+4*C56*F31*F33*F12*F13+4*C56*F32*F33*F11*F13+2*C16*F31^2*F12*F13+C12*F32^2*F11^2);
	    cout[3,2] = (C22*F32^2*F22^2+C33*F33^2*F23^2+4*C45*F31*F22*F21*F33+4*C45*F31*F23*F21*F32+C11*F31^2*F21^2+C23*F33^2*F22^2+C23*F32^2*F23^2+C12*F31^2*F22^2+C13*F31^2*F23^2+C13*F33^2*F21^2+2*C26*F32*F22^2*F33+4*C56*F31*F23*F22*F33+2*C26*F32^2*F22*F23+4*C56*F32*F23*F21*F33+4*C66*F32*F23*F22*F33+2*C24*F31*F22^2*F32+2*C35*F33^2*F21*F23+C12*F32^2*F21^2+2*C36*F33^2*F22*F23+2*C14*F31^2*F21*F22+2*C14*F31*F21^2*F32+2*C24*F32^2*F21*F22+2*C15*F31^2*F21*F23+2*C35*F31*F23^2*F33+2*C36*F32*F23^2*F33+4*C44*F31*F22*F21*F32+2*C15*F31*F21^2*F33+4*C55*F31*F23*F21*F33+4*C46*F31*F22*F23*F32+4*C46*F32*F21*F22*F33+2*C34*F33^2*F21*F22+2*C34*F31*F32*F23^2+2*C25*F31*F33*F22^2+2*C25*F32^2*F21*F23+2*C16*F31^2*F22*F23+2*C16*F32*F33*F21^2);
	    cout[3,3] = (C11*F31^4+4*C14*F31^3*F32+4*C15*F31^3*F33+2*C12*F31^2*F32^2+4*C16*F31^2*F32*F33+2*C13*F31^2*F33^2+4*C44*F31^2*F32^2+8*C45*F31^2*F32*F33+4*C24*F31*F32^3+8*C46*F31*F32^2*F33+4*C34*F31*F32*F33^2+4*C55*F33^2*F31^2+4*C25*F33*F31*F32^2+8*C56*F32*F33^2*F31+4*C35*F33^3*F31+C22*F32^4+4*C26*F32^3*F33+2*C23*F32^2*F33^2+4*C66*F32^2*F33^2+4*C36*F32*F33^3+C33*F33^4);
	    cout[3,4] = (C26*F22*F32^2*F13+C14*F21*F31^2*F12+C14*F22*F31^2*F11+C35*F21*F33^2*F13+C35*F23*F33^2*F11+C26*F23*F32^2*F12+C33*F23*F33^2*F13+2*C56*F23*F32*F11*F33+C11*F21*F31^2*F11+C22*F22*F32^2*F12+2*C25*F31*F33*F12*F22+2*C16*F32*F33*F11*F21+2*C34*F31*F32*F13*F23+C12*F31^2*F12*F22+C34*F33^2*F11*F22+C23*F32^2*F13*F23+C16*F31^2*F13*F22+C13*F31^2*F13*F23+C13*F33^2*F11*F21+C25*F32^2*F13*F21+C25*F32^2*F11*F23+C12*F32^2*F11*F21+C16*F31^2*F12*F23+C34*F33^2*F12*F21+C23*F33^2*F12*F22+C24*F22*F32^2*F11+C15*F23*F31^2*F11+2*C46*F23*F32*F12*F31+C36*F23*F33^2*F12+2*C46*F22*F31*F13*F32+2*C46*F22*F33*F11*F32+2*C46*F21*F32*F12*F33+2*C55*F21*F33*F13*F31+2*C55*F23*F31*F11*F33+2*C56*F22*F33*F13*F31+2*C56*F23*F31*F12*F33+2*C56*F21*F33*F13*F32+2*C66*F22*F33*F13*F32+2*C66*F23*F32*F12*F33+C24*F21*F32^2*F12+2*C45*F22*F31*F11*F33+2*C45*F21*F33*F12*F31+2*C45*F21*F32*F13*F31+C15*F21*F31^2*F13+C36*F22*F33^2*F13+2*C26*F22*F32*F12*F33+2*C14*F21*F31*F11*F32+2*C35*F23*F31*F13*F33+2*C36*F23*F32*F13*F33+2*C24*F22*F31*F12*F32+2*C15*F21*F31*F11*F33+2*C45*F23*F31*F11*F32+2*C44*F22*F31*F11*F32+2*C44*F21*F32*F12*F31);
	    cout[3,5] = (C26*F32^3*F13+C11*F31^3*F11+C36*F33^3*F12+C35*F33^3*F11+C14*F31^3*F12+C15*F31^3*F13+C24*F32^3*F11+C22*F32^3*F12+C33*F33^3*F13+4*C46*F31*F12*F32*F33+4*C56*F31*F13*F32*F33+2*C34*F33*F13*F31*F32+4*C45*F32*F11*F31*F33+2*C25*F32*F12*F31*F33+2*C16*F31*F11*F32*F33+2*C44*F31^2*F12*F32+3*C36*F32*F13*F33^2+2*C44*F32^2*F11*F31+3*C24*F31*F12*F32^2+2*C45*F31^2*F13*F32+2*C45*F31^2*F12*F33+2*C55*F31^2*F13*F33+C34*F32*F11*F33^2+C34*F31*F12*F33^2+2*C55*F33^2*F11*F31+C23*F33*F13*F32^2+C25*F33*F11*F32^2+C23*F32*F12*F33^2+C25*F31*F13*F32^2+3*C15*F31^2*F11*F33+C16*F32*F13*F31^2+C16*F33*F12*F31^2+2*C66*F33^2*F12*F32+C13*F31*F11*F33^2+2*C46*F32^2*F11*F33+2*C56*F33^2*F12*F31+2*C56*F33^2*F11*F32+3*C26*F32^2*F12*F33+2*C46*F32^2*F13*F31+3*C14*F31^2*F11*F32+2*C66*F32^2*F13*F33+3*C35*F31*F13*F33^2+C13*F33*F13*F31^2+C12*F32*F12*F31^2+C12*F31*F11*F32^2);
	    cout[3,6] = (C26*F32^3*F23+C22*F32^3*F22+C15*F31^3*F23+C11*F31^3*F21+C33*F33^3*F23+C35*F33^3*F21+C36*F33^3*F22+4*C46*F31*F22*F32*F33+2*C34*F33*F23*F31*F32+2*C56*F33^2*F22*F31+2*C56*F33^2*F21*F32+2*C16*F31*F21*F32*F33+2*C45*F31^2*F22*F33+2*C66*F32^2*F23*F33+2*C55*F31^2*F23*F33+3*C36*F32*F23*F33^2+2*C44*F31^2*F22*F32+2*C44*F32^2*F21*F31+3*C15*F31^2*F21*F33+4*C45*F32*F21*F31*F33+2*C25*F32*F22*F31*F33+4*C56*F31*F23*F32*F33+2*C45*F31^2*F23*F32+2*C55*F33^2*F21*F31+3*C14*F31^2*F21*F32+3*C35*F31*F23*F33^2+3*C26*F32^2*F22*F33+2*C46*F32^2*F23*F31+2*C46*F32^2*F21*F33+2*C66*F33^2*F22*F32+C23*F33*F23*F32^2+C12*F31*F21*F32^2+C34*F32*F21*F33^2+C12*F32*F22*F31^2+C34*F31*F22*F33^2+C13*F31*F21*F33^2+C25*F31*F23*F32^2+C13*F33*F23*F31^2+C25*F33*F21*F32^2+C16*F32*F23*F31^2+C23*F32*F22*F33^2+C16*F33*F22*F31^2+3*C24*F31*F22*F32^2+C14*F31^3*F22+C24*F32^3*F21);
	    cout[4,1] = (C26*F23*F12^3+C24*F21*F12^3+C35*F21*F13^3+C36*F22*F13^3+C22*F22*F12^3+C33*F23*F13^3+C14*F22*F11^3+C15*F23*F11^3+C11*F21*F11^3+2*C25*F22*F12*F11*F13+4*C45*F21*F12*F11*F13+2*C16*F21*F11*F12*F13+4*C46*F22*F11*F12*F13+4*C56*F23*F11*F12*F13+2*C34*F23*F13*F11*F12+C25*F21*F13*F12^2+C16*F23*F12*F11^2+C16*F22*F13*F11^2+C13*F23*F13*F11^2+C13*F21*F11*F13^2+C34*F21*F12*F13^2+C34*F22*F11*F13^2+C25*F23*F11*F12^2+C23*F22*F12*F13^2+C12*F21*F11*F12^2+C12*F22*F12*F11^2+2*C46*F21*F12^2*F13+3*C36*F23*F12*F13^2+3*C24*F22*F11*F12^2+3*C26*F22*F12^2*F13+2*C56*F21*F13^2*F12+2*C56*F22*F13^2*F11+2*C66*F23*F12^2*F13+3*C14*F21*F11^2*F12+2*C44*F21*F12^2*F11+2*C44*F22*F11^2*F12+2*C66*F22*F13^2*F12+C23*F23*F13*F12^2+2*C55*F23*F11^2*F13+2*C55*F21*F13^2*F11+3*C15*F21*F11^2*F13+2*C45*F22*F11^2*F13+2*C45*F23*F11^2*F12+2*C46*F23*F12^2*F11+3*C35*F23*F11*F13^2);
	    cout[4,2] = (C26*F22^3*F13+C11*F21^3*F11+C33*F23^3*F13+C24*F22^3*F11+C36*F23^3*F12+C15*F21^3*F13+C22*F22^3*F12+4*C46*F21*F12*F22*F23+C35*F23^3*F11+C25*F23*F11*F22^2+2*C44*F22^2*F11*F21+2*C46*F22^2*F13*F21+2*C44*F21^2*F12*F22+3*C15*F21^2*F11*F23+2*C25*F22*F12*F21*F23+4*C45*F22*F11*F21*F23+3*C35*F23^2*F13*F21+2*C45*F21^2*F12*F23+2*C45*F21^2*F13*F22+C13*F21*F11*F23^2+2*C55*F21^2*F13*F23+3*C26*F22^2*F12*F23+C12*F21*F11*F22^2+C13*F23*F13*F21^2+C34*F22*F11*F23^2+C12*F22*F12*F21^2+C23*F22*F12*F23^2+C16*F22*F13*F21^2+C34*F21*F12*F23^2+C23*F23*F13*F22^2+2*C46*F22^2*F11*F23+C16*F23*F12*F21^2+2*C34*F23*F13*F21*F22+2*C55*F23^2*F11*F21+2*C56*F23^2*F12*F21+C25*F21*F13*F22^2+2*C16*F21*F11*F22*F23+3*C24*F21*F12*F22^2+3*C36*F23^2*F13*F22+2*C56*F23^2*F11*F22+2*C66*F22^2*F13*F23+4*C56*F21*F13*F22*F23+3*C14*F21^2*F11*F22+2*C66*F23^2*F12*F22+C14*F21^3*F12);
	    cout[4,3] = (C26*F12*F23*F32^2+C26*F13*F22*F32^2+C24*F11*F22*F32^2+C36*F13*F22*F33^2+2*C35*F13*F23*F31*F33+2*C66*F12*F23*F32*F33+2*C45*F11*F22*F31*F33+2*C15*F11*F21*F31*F33+2*C55*F13*F21*F31*F33+2*C26*F12*F22*F32*F33+2*C46*F12*F23*F31*F32+2*C45*F11*F23*F31*F32+2*C44*F11*F22*F31*F32+2*C44*F12*F21*F31*F32+2*C36*F13*F23*F32*F33+2*C55*F11*F23*F31*F33+2*C24*F12*F22*F31*F32+2*C45*F12*F21*F31*F33+2*C46*F13*F22*F31*F32+2*C45*F13*F21*F31*F32+2*C56*F12*F23*F31*F33+C36*F12*F23*F33^2+C11*F11*F21*F31^2+C14*F11*F22*F31^2+C33*F13*F23*F33^2+C14*F12*F21*F31^2+C35*F11*F23*F33^2+C22*F12*F22*F32^2+C35*F13*F21*F33^2+2*C66*F13*F22*F32*F33+2*C56*F13*F21*F32*F33+2*C56*F11*F23*F32*F33+2*C56*F13*F22*F31*F33+C15*F11*F23*F31^2+C15*F13*F21*F31^2+C24*F12*F21*F32^2+2*C46*F11*F22*F32*F33+2*C46*F12*F21*F32*F33+C23*F23*F13*F32^2+C23*F22*F12*F33^2+C34*F21*F12*F33^2+C34*F22*F11*F33^2+C25*F23*F11*F32^2+C25*F21*F13*F32^2+2*C16*F21*F11*F32*F33+C13*F23*F13*F31^2+C16*F22*F13*F31^2+2*C34*F23*F13*F31*F32+C12*F21*F11*F32^2+C16*F23*F12*F31^2+C12*F22*F12*F31^2+2*C25*F22*F12*F31*F33+C13*F21*F11*F33^2+2*C14*F11*F21*F31*F32);
	    cout[4,4] = (C33*F23^2*F13^2+C44*F22^2*F11^2+C44*F21^2*F12^2+C66*F22^2*F13^2+C66*F23^2*F12^2+C11*F21^2*F11^2+C22*F22^2*F12^2+C55*F21^2*F13^2+C55*F23^2*F11^2+2*C23*F22*F12*F13*F23+2*C34*F22*F11*F13*F23+2*C24*F22^2*F11*F12+2*C35*F23^2*F11*F13+2*C35*F21*F13^2*F23+2*C36*F22*F13^2*F23+2*C46*F21*F12*F13*F22+2*C14*F21^2*F11*F12+2*C45*F21*F12*F11*F23+2*C46*F22*F11*F12*F23+2*C45*F21*F13*F11*F22+2*C14*F21*F11^2*F22+2*C56*F21*F13*F12*F23+2*C36*F23^2*F12*F13+2*C56*F22*F13*F11*F23+2*C44*F21*F12*F11*F22+2*C15*F21*F11^2*F23+2*C25*F22*F12*F11*F23+2*C25*F21*F13*F12*F22+2*C16*F21*F11*F12*F23+2*C16*F21*F11*F13*F22+2*C66*F22*F13*F12*F23+2*C12*F21*F11*F12*F22+2*C15*F21^2*F11*F13+2*C56*F23^2*F11*F12+2*C46*F21*F12^2*F23+2*C24*F21*F12^2*F22+2*C13*F21*F11*F13*F23+2*C46*F22^2*F11*F13+2*C34*F21*F12*F13*F23+2*C45*F22*F11^2*F23+2*C55*F21*F13*F11*F23+2*C45*F21^2*F12*F13+2*C56*F21*F13^2*F22+2*C26*F22*F12^2*F23+2*C26*F22^2*F12*F13);
	    cout[4,5] = (C11*F21*F11^2*F31+C22*F22*F12^2*F32+C26*F23*F12^2*F32+C15*F21*F11^2*F33+C26*F22*F12^2*F33+C56*F22*F13^2*F31+C66*F22*F13^2*F32+C66*F23*F12^2*F33+C56*F21*F13^2*F32+C45*F22*F11^2*F33+C45*F23*F11^2*F32+C55*F21*F13^2*F31+C55*F23*F11^2*F33+C15*F23*F11^2*F31+C14*F21*F11^2*F32+C14*F22*F11^2*F31+C44*F21*F12^2*F31+C44*F22*F11^2*F32+C46*F23*F12^2*F31+C36*F22*F13^2*F33+C46*F21*F12^2*F33+C36*F23*F13^2*F32+C35*F21*F13^2*F33+C35*F23*F13^2*F31+C33*F23*F13^2*F33+C24*F21*F12^2*F32+C24*F22*F12^2*F31+C23*F22*F12*F13*F33+C23*F23*F13*F12*F32+C46*F22*F11*F12*F33+C46*F23*F12*F11*F32+C46*F22*F13*F12*F31+C46*F21*F12*F13*F32+C12*F21*F11*F12*F32+C12*F22*F12*F11*F31+C16*F22*F13*F11*F31+C56*F23*F12*F13*F31+C56*F23*F11*F13*F32+C56*F21*F13*F12*F33+C56*F22*F13*F11*F33+C45*F23*F11*F12*F31+C66*F22*F13*F12*F33+C66*F23*F12*F13*F32+C25*F21*F13*F12*F32+C25*F22*F12*F11*F33+C25*F22*F12*F13*F31+C25*F23*F11*F12*F32+C45*F22*F11*F13*F31+C45*F21*F12*F11*F33+C45*F21*F13*F11*F32+C13*F21*F11*F13*F33+C13*F23*F13*F11*F31+C55*F21*F13*F11*F33+2*C24*F22*F11*F12*F32+2*C15*F21*F11*F13*F31+2*C26*F22*F12*F13*F32+2*C56*F23*F11*F12*F33+2*C45*F21*F12*F13*F31+2*C14*F21*F11*F12*F31+2*C36*F23*F12*F13*F33+2*C46*F22*F11*F13*F32+2*C35*F23*F11*F13*F33+C55*F23*F11*F13*F31+C16*F21*F11*F13*F32+C16*F21*F11*F12*F33+C16*F23*F12*F11*F31+C34*F22*F11*F13*F33+C34*F21*F12*F13*F33+C34*F23*F13*F11*F32+C34*F23*F13*F12*F31+C44*F21*F12*F11*F32+C44*F22*F11*F12*F31);
	    cout[4,6] = (C35*F23^2*F13*F31+C46*F22^2*F13*F31+C11*F21^2*F11*F31+C26*F22^2*F13*F32+C44*F22^2*F11*F31+C26*F22^2*F12*F33+C44*F21^2*F12*F32+C14*F21^2*F12*F31+C46*F22*F11*F23*F32+C12*F22*F12*F21*F31+C56*F23*F11*F22*F33+C46*F21*F12*F22*F33+C56*F23*F12*F21*F33+C56*F21*F13*F23*F32+C12*F21*F11*F22*F32+C56*F22*F13*F23*F31+C56*F23^2*F12*F31+C66*F23*F12*F22*F33+C14*F21^2*F11*F32+C66*F22*F13*F23*F32+C36*F23^2*F13*F32+C13*F21*F11*F23*F33+C13*F23*F13*F21*F31+C25*F23*F11*F22*F32+C45*F23*F11*F21*F32+C25*F22*F12*F21*F33+C25*F22*F12*F23*F31+C55*F23^2*F11*F31+C36*F23^2*F12*F33+C22*F22^2*F12*F32+C24*F22^2*F11*F32+C33*F23^2*F13*F33+C24*F22^2*F12*F31+C45*F21^2*F12*F33+C66*F23^2*F12*F32+C35*F23^2*F11*F33+C56*F23^2*F11*F32+C66*F22^2*F13*F33+C34*F21*F12*F23*F33+2*C14*F21*F11*F22*F31+2*C15*F21*F11*F23*F31+2*C26*F23*F12*F22*F32+2*C35*F23*F13*F21*F33+2*C45*F22*F11*F23*F31+2*C46*F23*F12*F21*F32+2*C56*F21*F13*F22*F33+2*C24*F21*F12*F22*F32+C45*F22*F11*F21*F33+2*C36*F22*F13*F23*F33+C25*F21*F13*F22*F32+C45*F21^2*F13*F32+C45*F21*F12*F23*F31+C45*F21*F13*F22*F31+C46*F22^2*F11*F33+C15*F21^2*F13*F31+C16*F22*F13*F21*F31+C55*F23*F11*F21*F33+C16*F21*F11*F22*F33+C15*F21^2*F11*F33+C34*F23*F13*F22*F31+C16*F21*F11*F23*F32+C55*F21*F13*F23*F31+C16*F23*F12*F21*F31+C34*F22*F11*F23*F33+C23*F23*F13*F22*F32+C46*F22*F13*F21*F32+C34*F23*F13*F21*F32+C46*F23*F12*F22*F31+C44*F21*F12*F22*F31+C55*F21^2*F13*F33+C44*F22*F11*F21*F32+C23*F22*F12*F23*F33);
	    cout[5,1] = (C26*F33*F12^3+C11*F31*F11^3+C35*F31*F13^3+C36*F32*F13^3+C24*F31*F12^3+C22*F32*F12^3+C33*F33*F13^3+C14*F32*F11^3+2*C55*F31*F13^2*F11+3*C36*F33*F12*F13^2+2*C46*F33*F12^2*F11+3*C14*F31*F11^2*F12+C12*F32*F12*F11^2+2*C16*F31*F11*F12*F13+4*C46*F32*F11*F12*F13+4*C56*F33*F11*F12*F13+2*C55*F33*F11^2*F13+3*C15*F31*F11^2*F13+2*C46*F31*F12^2*F13+2*C56*F31*F13^2*F12+2*C66*F33*F12^2*F13+3*C35*F33*F11*F13^2+2*C45*F33*F11^2*F12+2*C45*F32*F11^2*F13+2*C44*F31*F12^2*F11+2*C44*F32*F11^2*F12+3*C26*F32*F12^2*F13+2*C34*F33*F13*F11*F12+2*C25*F32*F12*F11*F13+4*C45*F31*F12*F11*F13+C16*F33*F12*F11^2+2*C56*F32*F13^2*F11+C13*F31*F11*F13^2+C13*F33*F13*F11^2+C16*F32*F13*F11^2+2*C66*F32*F13^2*F12+C25*F33*F11*F12^2+C25*F31*F13*F12^2+C15*F33*F11^3+C12*F31*F11*F12^2+C34*F32*F11*F13^2+C23*F32*F12*F13^2+C23*F33*F13*F12^2+3*C24*F32*F11*F12^2+C34*F31*F12*F13^2);
	    cout[5,2] = (C24*F22^2*F32*F11+C26*F22^2*F33*F12+C26*F22^2*F32*F13+C35*F23^2*F31*F13+C35*F23^2*F33*F11+C36*F23^2*F33*F12+C11*F21^2*F31*F11+C14*F21^2*F32*F11+C33*F23^2*F33*F13+C14*F21^2*F31*F12+C15*F21^2*F33*F11+C15*F21^2*F31*F13+C36*F23^2*F32*F13+C24*F22^2*F31*F12+C22*F22^2*F32*F12+2*C55*F23*F31*F13*F21+2*C55*F21*F33*F11*F23+2*C35*F21*F33*F13*F23+2*C14*F21*F31*F11*F22+2*C36*F22*F33*F13*F23+2*C24*F21*F32*F12*F22+2*C15*F21*F31*F11*F23+2*C26*F22*F32*F12*F23+2*C45*F21*F32*F11*F23+2*C45*F22*F31*F13*F21+2*C45*F23*F31*F12*F21+2*C66*F22*F33*F12*F23+2*C56*F22*F33*F11*F23+2*C66*F23*F32*F13*F22+2*C56*F23*F31*F13*F22+2*C56*F21*F33*F12*F23+2*C56*F23*F32*F13*F21+2*C45*F21*F33*F11*F22+2*C46*F22*F33*F12*F21+2*C46*F23*F32*F11*F22+2*C46*F21*F32*F13*F22+2*C46*F22*F31*F12*F23+2*C44*F22*F31*F12*F21+2*C44*F21*F32*F11*F22+C13*F33*F13*F21^2+C23*F33*F13*F22^2+C23*F32*F12*F23^2+C34*F31*F12*F23^2+C34*F32*F11*F23^2+C13*F31*F11*F23^2+2*C16*F31*F11*F22*F23+2*C34*F33*F13*F21*F22+2*C25*F32*F12*F21*F23+C16*F33*F12*F21^2+C25*F33*F11*F22^2+C25*F31*F13*F22^2+C16*F32*F13*F21^2+C12*F32*F12*F21^2+C12*F31*F11*F22^2);
	    cout[5,3] = (C26*F32^3*F13+C11*F31^3*F11+C36*F33^3*F12+C35*F33^3*F11+C14*F31^3*F12+C15*F31^3*F13+C24*F32^3*F11+C22*F32^3*F12+C33*F33^3*F13+4*C46*F31*F12*F32*F33+4*C56*F31*F13*F32*F33+2*C34*F33*F13*F31*F32+4*C45*F32*F11*F31*F33+2*C25*F32*F12*F31*F33+2*C16*F31*F11*F32*F33+2*C44*F31^2*F12*F32+3*C36*F32*F13*F33^2+2*C44*F32^2*F11*F31+3*C24*F31*F12*F32^2+2*C45*F31^2*F13*F32+2*C45*F31^2*F12*F33+2*C55*F31^2*F13*F33+C34*F32*F11*F33^2+C34*F31*F12*F33^2+2*C55*F33^2*F11*F31+C23*F33*F13*F32^2+C25*F33*F11*F32^2+C23*F32*F12*F33^2+C25*F31*F13*F32^2+3*C15*F31^2*F11*F33+C16*F32*F13*F31^2+C16*F33*F12*F31^2+2*C66*F33^2*F12*F32+C13*F31*F11*F33^2+2*C46*F32^2*F11*F33+2*C56*F33^2*F12*F31+2*C56*F33^2*F11*F32+3*C26*F32^2*F12*F33+2*C46*F32^2*F13*F31+3*C14*F31^2*F11*F32+2*C66*F32^2*F13*F33+3*C35*F31*F13*F33^2+C13*F33*F13*F31^2+C12*F32*F12*F31^2+C12*F31*F11*F32^2);
	    cout[5,4] = (C46*F33*F12^2*F21+C44*F32*F11^2*F22+C45*F33*F11^2*F22+C45*F32*F11^2*F23+C46*F31*F12^2*F23+C11*F21*F11^2*F31+C22*F22*F12^2*F32+C26*F23*F12^2*F32+C15*F21*F11^2*F33+C12*F31*F11*F12*F22+C34*F33*F13*F12*F21+C12*F32*F12*F11*F21+2*C45*F31*F12*F13*F21+C26*F22*F12^2*F33+C13*F33*F13*F11*F21+2*C46*F32*F11*F13*F22+C34*F33*F13*F11*F22+C56*F32*F13^2*F21+C56*F31*F13^2*F22+C66*F32*F13^2*F22+C55*F33*F11^2*F23+C23*F33*F13*F12*F22+C34*F32*F11*F13*F23+C34*F31*F12*F13*F23+C55*F31*F13^2*F21+C23*F32*F12*F13*F23+C13*F31*F11*F13*F23+C25*F32*F12*F13*F21+C25*F32*F12*F11*F23+C25*F31*F13*F12*F22+2*C56*F33*F11*F12*F23+C25*F33*F11*F12*F22+C16*F33*F12*F11*F21+C16*F31*F11*F13*F22+C16*F31*F11*F12*F23+C66*F33*F12^2*F23+C15*F23*F11^2*F31+C14*F21*F11^2*F32+C14*F22*F11^2*F31+C16*F32*F13*F11*F21+C36*F22*F13^2*F33+C36*F23*F13^2*F32+C35*F21*F13^2*F33+C35*F23*F13^2*F31+C33*F23*F13^2*F33+C24*F21*F12^2*F32+C24*F22*F12^2*F31+C46*F22*F11*F12*F33+C46*F23*F12*F11*F32+C46*F22*F13*F12*F31+C46*F21*F12*F13*F32+C56*F23*F12*F13*F31+C56*F23*F11*F13*F32+C56*F21*F13*F12*F33+C56*F22*F13*F11*F33+C45*F23*F11*F12*F31+C66*F22*F13*F12*F33+C66*F23*F12*F13*F32+C45*F22*F11*F13*F31+C45*F21*F12*F11*F33+C45*F21*F13*F11*F32+C55*F21*F13*F11*F33+C44*F31*F12^2*F21+2*C24*F22*F11*F12*F32+2*C15*F21*F11*F13*F31+2*C26*F22*F12*F13*F32+2*C14*F21*F11*F12*F31+2*C36*F23*F12*F13*F33+2*C35*F23*F11*F13*F33+C55*F23*F11*F13*F31+C44*F21*F12*F11*F32+C44*F22*F11*F12*F31);
	    cout[5,5] = (C66*F32^2*F13^2+C55*F31^2*F13^2+C44*F32^2*F11^2+C44*F31^2*F12^2+C55*F33^2*F11^2+C11*F31^2*F11^2+C66*F33^2*F12^2+2*C24*F31*F12^2*F32+2*C16*F31*F11*F13*F32+2*C16*F31*F11*F12*F33+2*C23*F32*F12*F13*F33+2*C36*F33^2*F12*F13+2*C14*F31^2*F11*F12+C33*F33^2*F13^2+2*C46*F31*F12^2*F33+2*C24*F32^2*F11*F12+2*C46*F32^2*F11*F13+2*C12*F31*F11*F12*F32+2*C46*F31*F12*F13*F32+2*C46*F32*F11*F12*F33+2*C26*F32*F12^2*F33+2*C35*F33^2*F11*F13+2*C36*F32*F13^2*F33+2*C14*F31*F11^2*F32+2*C35*F31*F13^2*F33+2*C26*F32^2*F12*F13+2*C56*F31*F13^2*F32+2*C56*F33^2*F11*F12+2*C15*F31^2*F11*F13+2*C15*F31*F11^2*F33+2*C45*F31*F12*F11*F33+2*C25*F32*F12*F11*F33+2*C66*F32*F13*F12*F33+2*C45*F31^2*F12*F13+2*C13*F31*F11*F13*F33+2*C56*F31*F13*F12*F33+2*C25*F31*F13*F12*F32+2*C44*F31*F12*F11*F32+2*C55*F31*F13*F11*F33+2*C34*F31*F12*F13*F33+2*C34*F32*F11*F13*F33+2*C45*F31*F13*F11*F32+2*C45*F32*F11^2*F33+2*C56*F32*F13*F11*F33+C22*F32^2*F12^2);
	    cout[5,6] = (C55*F23*F31^2*F13+C26*F22*F32^2*F13+C14*F21*F31^2*F12+C14*F22*F31^2*F11+C44*F21*F32^2*F11+C44*F22*F31^2*F12+C35*F21*F33^2*F13+C35*F23*F33^2*F11+C26*F23*F32^2*F12+C33*F23*F33^2*F13+C46*F23*F32^2*F11+C56*F23*F32*F11*F33+C11*F21*F31^2*F11+C66*F22*F33^2*F12+C22*F22*F32^2*F12+C45*F23*F31^2*F12+C45*F22*F31^2*F13+C66*F23*F32^2*F13+C55*F21*F33^2*F11+C56*F21*F33^2*F12+C56*F22*F33^2*F11+C24*F22*F32^2*F11+C15*F23*F31^2*F11+C23*F22*F32*F13*F33+C46*F23*F32*F12*F31+C36*F23*F33^2*F12+C12*F21*F31*F12*F32+C12*F22*F32*F11*F31+C46*F22*F31*F13*F32+C46*F22*F33*F11*F32+C46*F21*F32*F12*F33+C55*F21*F33*F13*F31+C55*F23*F31*F11*F33+C56*F22*F33*F13*F31+C56*F23*F31*F12*F33+C56*F21*F33*F13*F32+C66*F22*F33*F13*F32+C66*F23*F32*F12*F33+C24*F21*F32^2*F12+C45*F22*F31*F11*F33+C45*F21*F33*F12*F31+C45*F21*F32*F13*F31+C15*F21*F31^2*F13+C36*F22*F33^2*F13+2*C26*F22*F32*F12*F33+2*C56*F23*F31*F13*F32+2*C45*F21*F32*F11*F33+2*C14*F21*F31*F11*F32+2*C35*F23*F31*F13*F33+2*C36*F23*F32*F13*F33+2*C46*F22*F31*F12*F33+2*C24*F22*F31*F12*F32+2*C15*F21*F31*F11*F33+C45*F23*F31*F11*F32+C16*F23*F32*F11*F31+C13*F21*F31*F13*F33+C13*F23*F33*F11*F31+C16*F22*F33*F11*F31+C16*F21*F31*F13*F32+C16*F21*F31*F12*F33+C25*F23*F31*F12*F32+C34*F23*F33*F12*F31+C25*F22*F32*F11*F33+C25*F21*F33*F12*F32+C25*F22*F32*F13*F31+C23*F23*F33*F12*F32+C34*F22*F31*F13*F33+C34*F23*F33*F11*F32+C34*F21*F32*F13*F33+C44*F22*F31*F11*F32+C44*F21*F32*F12*F31+C46*F21*F32^2*F13);
	    cout[6,1] = (C35*F33*F21*F13^2+C35*F31*F23*F13^2+C34*F31*F22*F13^2+C36*F33*F22*F13^2+C36*F32*F23*F13^2+C33*F33*F23*F13^2+C12*F31*F21*F12^2+C12*F32*F22*F11^2+C24*F31*F22*F12^2+C24*F32*F21*F12^2+C22*F32*F22*F12^2+C15*F31*F23*F11^2+C15*F33*F21*F11^2+C25*F31*F23*F12^2+C25*F33*F21*F12^2+C13*F31*F21*F13^2+C13*F33*F23*F11^2+C26*F32*F23*F12^2+C34*F32*F21*F13^2+C26*F33*F22*F12^2+C23*F32*F22*F13^2+C16*F33*F22*F11^2+C23*F33*F23*F12^2+C11*F31*F21*F11^2+C16*F32*F23*F11^2+C14*F32*F21*F11^2+C14*F31*F22*F11^2+2*C66*F33*F22*F12*F13+2*C66*F32*F23*F12*F13+2*C24*F32*F22*F11*F12+2*C15*F31*F21*F11*F13+2*C45*F32*F21*F11*F13+2*C45*F31*F22*F11*F13+2*C45*F31*F23*F11*F12+2*C45*F33*F21*F11*F12+2*C25*F32*F22*F11*F13+2*C46*F33*F22*F11*F12+2*C55*F33*F21*F11*F13+2*C46*F32*F21*F12*F13+2*C46*F32*F23*F11*F12+2*C55*F31*F23*F11*F13+2*C34*F33*F23*F11*F12+2*C26*F32*F22*F12*F13+2*C46*F31*F22*F12*F13+2*C14*F31*F21*F11*F12+2*C44*F32*F21*F11*F12+2*C35*F33*F23*F11*F13+2*C56*F33*F22*F11*F13+2*C36*F33*F23*F12*F13+2*C56*F32*F23*F11*F13+2*C56*F31*F23*F12*F13+2*C56*F33*F21*F12*F13+2*C44*F31*F22*F11*F12+2*C16*F31*F21*F12*F13);
	    cout[6,2] = (C36*F32*F23^3+C24*F31*F22^3+3*C15*F31*F21^2*F23+3*C26*F32*F22^2*F23+2*C46*F31*F22^2*F23+2*C46*F33*F22^2*F21+3*C36*F33*F22*F23^2+2*C44*F31*F22^2*F21+2*C55*F31*F23^2*F21+2*C45*F33*F21^2*F22+3*C14*F31*F21^2*F22+C12*F31*F21*F22^2+C12*F32*F22*F21^2+2*C66*F33*F22^2*F23+2*C45*F32*F21^2*F23+C25*F31*F23*F22^2+C25*F33*F21*F22^2+C16*F33*F22*F21^2+C13*F31*F21*F23^2+C16*F32*F23*F21^2+2*C55*F33*F21^2*F23+3*C35*F33*F21*F23^2+C26*F33*F22^3+C15*F33*F21^3+3*C24*F32*F21*F22^2+C23*F32*F22*F23^2+C23*F33*F23*F22^2+2*C56*F31*F23^2*F22+C34*F31*F22*F23^2+C34*F32*F21*F23^2+2*C56*F32*F23^2*F21+C13*F33*F23*F21^2+C22*F32*F22^3+C11*F31*F21^3+C14*F32*F21^3+2*C34*F33*F23*F21*F22+C33*F33*F23^3+4*C46*F32*F21*F22*F23+4*C56*F33*F21*F22*F23+2*C25*F32*F22*F21*F23+4*C45*F31*F22*F21*F23+2*C66*F32*F23^2*F22+2*C16*F31*F21*F22*F23+2*C44*F32*F21^2*F22+C35*F31*F23^3);
	    cout[6,3] = (C26*F32^3*F23+C22*F32^3*F22+C15*F31^3*F23+C11*F31^3*F21+C33*F33^3*F23+C35*F33^3*F21+C36*F33^3*F22+4*C46*F31*F22*F32*F33+2*C34*F33*F23*F31*F32+2*C56*F33^2*F22*F31+2*C56*F33^2*F21*F32+2*C16*F31*F21*F32*F33+2*C45*F31^2*F22*F33+2*C66*F32^2*F23*F33+2*C55*F31^2*F23*F33+3*C36*F32*F23*F33^2+2*C44*F31^2*F22*F32+2*C44*F32^2*F21*F31+3*C15*F31^2*F21*F33+4*C45*F32*F21*F31*F33+2*C25*F32*F22*F31*F33+4*C56*F31*F23*F32*F33+2*C45*F31^2*F23*F32+2*C55*F33^2*F21*F31+3*C14*F31^2*F21*F32+3*C35*F31*F23*F33^2+3*C26*F32^2*F22*F33+2*C46*F32^2*F23*F31+2*C46*F32^2*F21*F33+2*C66*F33^2*F22*F32+C23*F33*F23*F32^2+C12*F31*F21*F32^2+C34*F32*F21*F33^2+C12*F32*F22*F31^2+C34*F31*F22*F33^2+C13*F31*F21*F33^2+C25*F31*F23*F32^2+C13*F33*F23*F31^2+C25*F33*F21*F32^2+C16*F32*F23*F31^2+C23*F32*F22*F33^2+C16*F33*F22*F31^2+3*C24*F31*F22*F32^2+C14*F31^3*F22+C24*F32^3*F21);
	    cout[6,4] = (C26*F33*F22^2*F12+C26*F32*F22^2*F13+C11*F31*F21^2*F11+C56*F31*F23^2*F12+C56*F32*F23^2*F11+C14*F31*F21^2*F12+C14*F32*F21^2*F11+C35*F33*F23^2*F11+C35*F31*F23^2*F13+C66*F32*F23^2*F12+C44*F32*F21^2*F12+C44*F31*F22^2*F11+C66*F33*F22^2*F13+C36*F32*F23^2*F13+C36*F33*F23^2*F12+C33*F33*F23^2*F13+C45*F33*F21^2*F12+C24*F32*F22^2*F11+C24*F31*F22^2*F12+C22*F32*F22^2*F12+C45*F32*F21^2*F13+C55*F31*F23^2*F11+C55*F33*F21^2*F13+C46*F33*F22^2*F11+C46*F31*F22^2*F13+C15*F31*F21^2*F13+C15*F33*F21^2*F11+C12*F32*F22*F11*F21+C45*F33*F21*F11*F22+C45*F32*F21*F11*F23+C45*F31*F22*F13*F21+C25*F33*F21*F12*F22+C25*F31*F23*F12*F22+C25*F32*F22*F11*F23+C25*F32*F22*F13*F21+C55*F31*F23*F13*F21+C55*F33*F21*F11*F23+C16*F31*F21*F13*F22+C16*F33*F22*F11*F21+C13*F33*F23*F11*F21+C45*F31*F23*F12*F21+2*C24*F32*F21*F12*F22+2*C45*F31*F22*F11*F23+2*C46*F32*F21*F12*F23+2*C26*F32*F22*F12*F23+2*C15*F31*F21*F11*F23+2*C14*F31*F21*F11*F22+2*C56*F33*F21*F13*F22+2*C35*F33*F21*F13*F23+2*C36*F33*F22*F13*F23+C13*F31*F21*F13*F23+C46*F32*F21*F13*F22+C46*F31*F22*F12*F23+C46*F32*F23*F11*F22+C16*F32*F23*F11*F21+C16*F31*F21*F12*F23+C23*F33*F23*F12*F22+C56*F31*F23*F13*F22+C56*F33*F21*F12*F23+C56*F32*F23*F13*F21+C56*F33*F22*F11*F23+C34*F32*F21*F13*F23+C34*F33*F23*F11*F22+C34*F31*F22*F13*F23+C34*F33*F23*F12*F21+C66*F33*F22*F12*F23+C66*F32*F23*F13*F22+C46*F33*F22*F12*F21+C23*F32*F22*F13*F23+C44*F32*F21*F11*F22+C44*F31*F22*F12*F21+C12*F31*F21*F12*F22);
	    cout[6,5] = (C55*F23*F31^2*F13+C26*F22*F32^2*F13+C14*F21*F31^2*F12+C14*F22*F31^2*F11+C44*F21*F32^2*F11+C44*F22*F31^2*F12+C35*F21*F33^2*F13+C35*F23*F33^2*F11+C26*F23*F32^2*F12+C33*F23*F33^2*F13+C46*F23*F32^2*F11+C56*F23*F32*F11*F33+C11*F21*F31^2*F11+C66*F22*F33^2*F12+C22*F22*F32^2*F12+C45*F23*F31^2*F12+C45*F22*F31^2*F13+C66*F23*F32^2*F13+C55*F21*F33^2*F11+C56*F21*F33^2*F12+C56*F22*F33^2*F11+C24*F22*F32^2*F11+C15*F23*F31^2*F11+C23*F22*F32*F13*F33+C46*F23*F32*F12*F31+C36*F23*F33^2*F12+C12*F21*F31*F12*F32+C12*F22*F32*F11*F31+C46*F22*F31*F13*F32+C46*F22*F33*F11*F32+C46*F21*F32*F12*F33+C55*F21*F33*F13*F31+C55*F23*F31*F11*F33+C56*F22*F33*F13*F31+C56*F23*F31*F12*F33+C56*F21*F33*F13*F32+C66*F22*F33*F13*F32+C66*F23*F32*F12*F33+C24*F21*F32^2*F12+C45*F22*F31*F11*F33+C45*F21*F33*F12*F31+C45*F21*F32*F13*F31+C15*F21*F31^2*F13+C36*F22*F33^2*F13+2*C26*F22*F32*F12*F33+2*C56*F23*F31*F13*F32+2*C45*F21*F32*F11*F33+2*C14*F21*F31*F11*F32+2*C35*F23*F31*F13*F33+2*C36*F23*F32*F13*F33+2*C46*F22*F31*F12*F33+2*C24*F22*F31*F12*F32+2*C15*F21*F31*F11*F33+C45*F23*F31*F11*F32+C16*F23*F32*F11*F31+C13*F21*F31*F13*F33+C13*F23*F33*F11*F31+C16*F22*F33*F11*F31+C16*F21*F31*F13*F32+C16*F21*F31*F12*F33+C25*F23*F31*F12*F32+C34*F23*F33*F12*F31+C25*F22*F32*F11*F33+C25*F21*F33*F12*F32+C25*F22*F32*F13*F31+C23*F23*F33*F12*F32+C34*F22*F31*F13*F33+C34*F23*F33*F11*F32+C34*F21*F32*F13*F33+C44*F22*F31*F11*F32+C44*F21*F32*F12*F31+C46*F21*F32^2*F13);
	    cout[6,6] = (C55*F31^2*F23^2+C44*F31^2*F22^2+C66*F33^2*F22^2+C66*F32^2*F23^2+C22*F32^2*F22^2+C33*F33^2*F23^2+C55*F33^2*F21^2+2*C45*F31*F22*F21*F33+2*C45*F31*F23*F21*F32+2*C25*F31*F23*F22*F32+C11*F31^2*F21^2+C44*F32^2*F21^2+2*C45*F32*F21^2*F33+2*C26*F32*F22^2*F33+2*C46*F32^2*F21*F23+2*C56*F31*F23*F22*F33+2*C23*F32*F22*F23*F33+2*C16*F31*F21*F23*F32+2*C16*F31*F21*F22*F33+2*C26*F32^2*F22*F23+2*C56*F32*F23*F21*F33+2*C66*F32*F23*F22*F33+2*C12*F31*F21*F22*F32+2*C46*F31*F22^2*F33+2*C56*F31*F23^2*F32+2*C56*F33^2*F21*F22+2*C24*F31*F22^2*F32+2*C35*F33^2*F21*F23+2*C36*F33^2*F22*F23+2*C45*F31^2*F22*F23+2*C14*F31^2*F21*F22+2*C14*F31*F21^2*F32+2*C24*F32^2*F21*F22+2*C15*F31^2*F21*F23+2*C35*F31*F23^2*F33+2*C36*F32*F23^2*F33+2*C13*F31*F21*F23*F33+2*C25*F32*F22*F21*F33+2*C44*F31*F22*F21*F32+2*C34*F31*F22*F23*F33+2*C15*F31*F21^2*F33+2*C34*F32*F21*F23*F33+2*C55*F31*F23*F21*F33+2*C46*F31*F22*F23*F32+2*C46*F32*F21*F22*F33);
	    cout .= cout .* (1/det(F));
	end
    return cout
end


end
